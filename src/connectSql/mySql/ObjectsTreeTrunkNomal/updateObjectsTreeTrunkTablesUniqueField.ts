import executeTransaction from '../executeTransaction';
import getAutoGeneratedColumns from '../utilities/getAutoGeneratedColumns';

export default async function updateObjectsTreeTrunkTablesUniqueField(
  tablesData: Array<{
    table: string;
    dataIn: Array<{ [key: string]: any }>;
    parentField: string;
    childField: string;
    uniqueField?: string; // ✅ thêm để tra parent theo mã
  }>
): Promise<{
  data: Array<{
    table: string;
    dataIn: Object[];
    oldData: Object[];
    parentField: string;
    childField: string;
  }>;
  status: boolean;
  errorCode: string | Object;
}> {
  const resultData: Array<{
    table: string;
    dataIn: Object[];
    oldData: Object[];
    parentField: string;
    childField: string;
  }> = [];

  const { status, errorCode } = await executeTransaction(async (connection) => {
    for (const { table, dataIn, parentField, childField, uniqueField } of tablesData) {
      const { allColumns, autoGeneratedFields } = await getAutoGeneratedColumns(connection, table);
      const validDataIn: Object[] = [];
      const collectedOldData: Object[] = [];

      for (const dataUpdateRaw of dataIn) {
        const dataUpdate = { ...dataUpdateRaw };
        const currentId = dataUpdate[childField];

        // Lấy bản ghi hiện tại
        const [currentRows] = await connection.execute(
          `SELECT * FROM ${table} WHERE ${childField} = ?`,
          [currentId]
        );
        if (currentRows.length === 0) throw new Error(`Record with ID ${currentId} not found`);
        const currentRecord = currentRows[0];

        // ✅ Nếu có parentField và uniqueField → tra parentId từ mã
        if (dataUpdate[parentField] && uniqueField) {
          const parentCode = dataUpdate[parentField];
          const [parentRows] = await connection.execute(
            `SELECT ${childField} FROM ${table} WHERE ${uniqueField} = ?`,
            [parentCode]
          );
          if ((parentRows as any[]).length === 0) {
            throw new Error(`Parent with ${uniqueField} = '${parentCode}' not found`);
          }
          dataUpdate[parentField] = parentRows[0][childField];
        }

        // Chuẩn bị dữ liệu cập nhật
        const updatePayload = Object.fromEntries(
          Object.entries(dataUpdate).filter(([key]) =>
            !autoGeneratedFields.includes(key)
          )
        );

        const updateKeys = Object.keys(updatePayload);
        const sql = `UPDATE ${table} SET ${updateKeys.map(k => `${k} = ?`).join(', ')} WHERE ${childField} = ?`;

        const [updateResult] = await connection.execute(
          sql,
          [...updateKeys.map(k => updatePayload[k]), currentId]
        );

        if ((updateResult as any).affectedRows === 0) {
          throw new Error(`Không có bản ghi nào được cập nhật cho ID ${currentId}`);
        }

        validDataIn.push(dataUpdate);

        const cleanedRows = currentRows.map((row: any) => {
          const newRow: any = {};
          for (const key in dataUpdateRaw) {
            if (key in row) {
              newRow[key] = row[key];
            }
          }
          return newRow;
        });

        collectedOldData.push(...cleanedRows);
      }

      resultData.push({
        table,
        dataIn: validDataIn,
        oldData: collectedOldData,
        parentField,
        childField
      });
    }
  });

  return {
    data: resultData,
    status,
    errorCode
  };
}
