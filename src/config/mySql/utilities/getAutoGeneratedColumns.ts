async function getAutoGeneratedColumns(connection: any, table: string): Promise<{
  allColumns: Array<{
    Field: string;
    Type: string;
    Default: string | null;
    Extra: string;
  }>;
  autoGeneratedFields: string[];
}> {
  const [columns] = await connection.execute(`DESCRIBE ${table}`);

  const allColumns = (columns as any[]).map(col => ({
    Field: col.Field,
    Type: col.Type,
    Default: col.Default,
    Extra: col.Extra
  }));

  const autoGeneratedFields = allColumns
    .filter(col =>
      col.Extra?.toLowerCase().includes('auto_increment') ||
      col.Extra?.toLowerCase().includes('default_generated') ||
      col.Default?.toLowerCase?.().includes('current_timestamp') ||
      col.Extra?.toLowerCase().includes('on update current_timestamp') ||
      col.Default?.toLowerCase?.().includes('uuid()')
    )
    .map(col => col.Field);

  return { allColumns, autoGeneratedFields };
}

export default getAutoGeneratedColumns;