import { v4 as uuidv4 } from 'uuid';
import executeTransaction from '../executeTransaction';
import getAutoGeneratedColumns from '../utilities/getAutoGeneratedColumns';

export default async function insertObjectsTreeTrunkTablesUniqueFieldNotIsSystem(
  tablesData: Array<{
    table: string;
    dataIn: Array<{ [key: string]: any }>;
    uniqueField: string;
    parentField: string;
    childField: string;
  }>
): Promise<{
  data: Array<{
    table: string;
    dataIn: Object[];
    oldData: Object[];
    parentField: string;
    childField: string;
  }>;
  status: boolean;
  errorCode: string | Object;
}> {
  const resultData: Array<{
    table: string;
    dataIn: Object[];
    oldData: Object[];
    parentField: string;
    childField: string;
  }> = [];

  const { status, errorCode } = await executeTransaction(async (connection) => {
    for (const { table, dataIn, uniqueField, parentField, childField } of tablesData) {
      const { allColumns, autoGeneratedFields } = await getAutoGeneratedColumns(connection, table);
      const hasIsSystem = allColumns.some(col => col.Field === 'isSystem');

      for (const dataInsertRaw of dataIn) {
        const dataInsert = { ...dataInsertRaw };
        const parentUniqueValue = dataInsert[parentField];
        let parentId: string | null = null;

        // Truy vấn parentId nếu có giá trị unique
        if (parentUniqueValue) {
          const [parentRows] = await connection.execute(
            `SELECT ${childField} FROM ${table} WHERE ${uniqueField} = ?`,
            [parentUniqueValue]
          );
          if ((parentRows as any[]).length === 0) {
            throw {
              message: `Parent with ${uniqueField} = '${parentUniqueValue}' not found`,
              code: "ER_NO_REFERENCED_ROW_2",
              errno: 1452,
              sqlState: "23000",
            };
          }
          parentId = (parentRows as any[])[0][childField];
        }

        const newRow = { ...dataInsert };

        // Gán parentId nếu có
        if (parentId) {
          newRow[parentField] = parentId;
        }

        // Tạo UUID nếu cần
        if (autoGeneratedFields.includes(childField)) {
          newRow[childField] = uuidv4();
        }

        // Gán isSystem = false nếu có
        if (hasIsSystem) {
          newRow.isSystem = false;
        }

        // Lọc bỏ các cột tự sinh
        const newRowFiltered = Object.fromEntries(
          Object.entries(newRow).filter(([key]) => !autoGeneratedFields.includes(key))
        );

        const sqlString = `INSERT INTO ${table} (${Object.keys(newRowFiltered).join(', ')})
          VALUES (${Object.keys(newRowFiltered).map(() => '?').join(', ')})`;

        await connection.execute(sqlString, Object.values(newRowFiltered));
      }
    }
  });

  // Gán kết quả trả về
  tablesData.forEach(({ table, dataIn, parentField, childField }) => {
    resultData.push({
      table,
      dataIn,
      oldData: [],
      parentField,
      childField
    });
  });

  return { data: resultData, status, errorCode };
}
