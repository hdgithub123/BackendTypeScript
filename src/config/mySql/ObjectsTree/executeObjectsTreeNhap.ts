import executeTransaction from '../executeTransaction';

async function getAutoGeneratedColumns(connection: any, table: string): Promise<string[]> {
  const [columns] = await connection.execute(`DESCRIBE \`${table}\``);
  return (columns as any[])
    .filter(col =>
      col.Extra.includes('auto_increment') ||
      col.Extra.toLowerCase().includes('default_generated') ||
      col.Default?.toLowerCase?.().includes('current_timestamp') ||
      col.Extra.includes('on update CURRENT_TIMESTAMP') ||
      col.Default?.toLowerCase?.().includes('uuid()')
    )
    .map(col => col.Field);
}

export async function insertObjectsTreeTables(
  tablesData: Array<{
    table: string;
    dataIn: Array<{ [key: string]: any }>;
    parentField: string;
    childField: string;
  }>
): Promise<{ data: any; status: boolean; errorCode: string | null }> {
  return await executeTransaction(async (connection) => {
    for (const { table, dataIn, parentField, childField } of tablesData) {
      const autoGeneratedFields = await getAutoGeneratedColumns(connection, table);
      // const isChildFieldAutoGen = autoGeneratedFields.includes(childField);
      console.log("autoGeneratedFields", autoGeneratedFields);

      for (const dataInsert of dataIn) {
        const parentId = dataInsert[parentField];
        console.log("parentId", parentId);

        if (parentId) {
          const [parentRows] = await connection.execute(
            `SELECT * FROM \`${table}\` WHERE \`${childField}\` = ?`,
            [parentId]
          );
          if (parentRows.length === 0) throw new Error(`Parent with id ${parentId} not found`);
          const parentData = parentRows[0];

          const [children] = await connection.execute(
            `SELECT \`${childField}\` FROM \`${table}\` WHERE \`${parentField}\` = ?`,
            [parentId]
          );

          const isLeaf = (children as any[]).length === 0;
          if (!isLeaf) {
            // Parent không phải leaf → insert bình thường
            const newRow = { ...dataInsert };
            const newRowFiltered = Object.fromEntries(
              Object.entries(newRow).filter(([key]) => !autoGeneratedFields.includes(key))
            );

            await connection.execute(
              `INSERT INTO \`${table}\` (${Object.keys(newRowFiltered).map(k => `\`${k}\``).join(', ')})
               VALUES (${Object.keys(newRowFiltered).map(() => '?').join(', ')})`,
              Object.values(newRowFiltered)
            );
            continue;
          }

          // Clone parent
          const parentClone = { ...parentData };
          delete parentClone[childField];
          const parentCloneFiltered = Object.fromEntries(
            Object.entries(parentClone).filter(([key]) => !autoGeneratedFields.includes(key))
          );

          const [cloneResult] = await connection.execute(
            `INSERT INTO \`${table}\` (${Object.keys(parentCloneFiltered).map(k => `\`${k}\``).join(', ')})
             VALUES (${Object.keys(parentCloneFiltered).map(() => '?').join(', ')})
             RETURNING \`${childField}\``,
            Object.values(parentCloneFiltered)
          );

          const newParentId = cloneResult?.[0]?.[childField];

          // Update lại bản gốc (child)
          const updatedChild = {
            ...dataInsert,
            [parentField]: newParentId
          };

          const updateKeys = Object.keys(updatedChild).filter(k => !autoGeneratedFields.includes(k));
          await connection.execute(
            `UPDATE \`${table}\` SET ${updateKeys.map(k => `\`${k}\` = ?`).join(', ')} WHERE \`${childField}\` = ?`,
            [...updateKeys.map(k => updatedChild[k]), parentId]
          );
        } else {
          // Không có parent → insert bình thường
          const newRow = { ...dataInsert };
          const newRowFiltered = Object.fromEntries(
            Object.entries(newRow).filter(([key]) => !autoGeneratedFields.includes(key))
          );
          console.log("newRowFiltered", newRowFiltered);
          console.log("newRow:", newRow);


          const sqlQuery =`INSERT INTO \`${table}\` (${Object.keys(newRowFiltered).map(k => `\`${k}\``).join(', ')})
             VALUES (${Object.keys(newRowFiltered).map(() => '?').join(', ')})
             RETURNING \`${childField}\``;
    

          // await connection.execute(
          //   `INSERT INTO \`${table}\` (${Object.keys(newRowFiltered).map(k => `\`${k}\``).join(', ')})
          //    VALUES (${Object.keys(newRowFiltered).map(() => '?').join(', ')})
          //    RETURNING \`${childField}\``,
          //   Object.values(newRowFiltered)
          // );

          console.log("sqlQuery", sqlQuery);
          
          await connection.execute(
            sqlQuery,
            Object.values(newRowFiltered)
          );
        }
      }
    }

    return { message: 'Insert tree data completed' };
  });
}

// export default insertObjectsTreeTables;
